@page "/voucher"
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>Voucher</PageTitle>

<div class="container-center" style="width:80%; margin:auto;">
    <h1 class="mb-5"><strong>Employee Details</strong></h1>
    @if (isLoading)
    {
        <div class="spinner-container">

            <div class="spinner" style="height:200px; width: 200px;"></div>
        </div>

    }
    @if (employee != null)
    {
        <div class="row justify-content-center">
            <div class="col-5 col-md-3 bg-light border-bottom border-white border-3 mb-3">
                <div class="p-2"><strong>ID Number</strong></div>
            </div>
            <div class="col-7 col-md-9 bg-light border-start border-bottom border-white border-3 mb-3">
                <div class="p-2">@employee.idNumber</div>
            </div>

            <div class="col-5 col-md-3 bg-light border-bottom border-white border-3 mb-3">
                <div class="p-2"><strong>First Name</strong></div>
            </div>
            <div class="col-7 col-md-9 bg-light border-start border-bottom border-white border-3 mb-3">
                <div class="p-2">@employee.firstName</div>
            </div>

            <div class="col-5 col-md-3 bg-light border-bottom border-white border-3 mb-3">
                <div class="p-2"><strong>Last Name</strong></div>
            </div>
            <div class="col-7 col-md-9 bg-light border-start border-bottom border-white border-3 mb-3">
                <div class="p-2">@employee.lastName</div>
            </div>

            <div class="col-5 col-md-3 bg-light border-bottom border-white border-3 mb-3">
                <div class="p-2"><strong>Middle Name</strong></div>
            </div>
            <div class="col-7 col-md-9 bg-light border-start border-bottom border-white border-3 mb-3">
                <div class="p-2">@employee.middleName</div>
            </div>
        </div>
            
        <table id="dataTable" class="table table-striped">
            <thead style="position: sticky; top: 0; z-index: 1; margin: 30px 30px;">
                <tr style="vertical-align: middle;">
                    <th style="width: 120px; text-align: left;">Transaction Number</th>
                    <th style="width: 140px;">Voucher Type</th>
                    <th style="width: 150px;">Voucher Number</th>
                    <th style="width: 150px;">Voucher Date Description</th>
                    <th style="width: 120px;">Voucher Location</th>
                    <th style="width: 120px;">Obligation Number</th>
                    <th style="width: 150px;">Obligation Date</th>
                    <th style="width: 120px;">Check Number</th>
                    <th style="width: 120px;">Check Date</th>
                    <th style="width: 120px; text-align: left;">Gross Amount</th>
                    <th style="width: 120px; text-align: left;">Net Amount</th>
                    <th style="width: 120px;">Fund Description</th>
                    <th style="width: 400px; text-align: center;">Particulars</th>
                    <th style="width: 120px;">Remarks</th>
                </tr>
            </thead>
            <tbody style="font-size:12px;">
                @if (vouchers != null && vouchers.Count > 0)

                {
                    @foreach (var voucher in vouchers)
                    {
                        <tr>
                            <td class="text-center" style="vertical-align:middle;">@voucher.VoucherId</td>
                            <td style="vertical-align:middle;">@(string.IsNullOrEmpty(voucher.VoucherType) ? "N/A" : voucher.VoucherType)</td>
                            <td style="vertical-align:middle;">@(string.IsNullOrEmpty(voucher.VoucherNumber) ? "N/A" : voucher.VoucherNumber)</td>
                            <td style="vertical-align:middle;">@(string.IsNullOrEmpty(voucher.VoucherDateDescription) ? "N/A" : voucher.VoucherDateDescription)</td>
                            <td style="vertical-align:middle;">@(string.IsNullOrEmpty(voucher.VoucherLocation) ? "N/A" : voucher.VoucherLocation)</td>
                            <td style="vertical-align:middle;">@(string.IsNullOrEmpty(voucher.ObligationNumber) ? "N/A" : voucher.ObligationNumber)</td>
                            <td style="vertical-align:middle;">@(string.IsNullOrEmpty(voucher.ObligationDate) ? "N/A" : voucher.ObligationDate)</td>
                            <td style="vertical-align:middle;">@(string.IsNullOrEmpty(voucher.CheckNumber) ? "N/A" : voucher.CheckNumber)</td>
                            <td style="vertical-align:middle;">@(string.IsNullOrEmpty(voucher.CheckDate) ? "N/A" : voucher.CheckDate)</td>
                            <td style="text-align: left; vertical-align:middle;">@voucher.GrossAmount.ToString("N2")</td>
                            <td style="text-align: left; vertical-align:middle;">@voucher.NetAmount.ToString("N2")</td>
                            <td  style="vertical-align:middle;">@(string.IsNullOrEmpty(voucher.FundDescription) ? "N/A" : voucher.FundDescription)</td>
                            <td style="vertical-align: middle;text-align: justify;">@(string.IsNullOrEmpty(voucher.Particulars) ? "N/A" : voucher.Particulars)</td>
                            <td  class='text-center' style="vertical-align:middle;">@(string.IsNullOrEmpty(voucher.Remarks) ? "N/A" : voucher.Remarks)</td>
                        </tr>
                    }
                }
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <p class="text-danger">@errorMessage</p>
                }
            
            </tbody>
        </table>
               

        
    }
</div>
@code {
    public class IdNumberConverter : JsonConverter<int?>
    {
        public override int? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            if (reader.TokenType == JsonTokenType.String)
            {
                if (int.TryParse(reader.GetString(), out int result))
                {
                    return result;
                }
            }
            return null;
        }

        public override void Write(Utf8JsonWriter writer, int? value, JsonSerializerOptions options)
        {
            writer.WriteStringValue(value?.ToString());
        }
    }
    private int? userId;
    private Employee? employee;
    private List<Vouchers>? vouchers = new List<Vouchers>();
    private int? payeeId;
    private string? errorMessage;
    private bool isLoading = true;
    private bool showModal = false;
    private bool isExpanded = false;
    private bool isDataTableInitialized = false;

    private async Task LoadUserIdFromSession()
    {
        try
        {
            var tempUserId = await ProtectedSessionStore.GetAsync<int?>("UserId");
            userId = tempUserId.Success ? tempUserId.Value : null;
            var tempPayeeId = await ProtectedSessionStore.GetAsync<int?>("PayeeId");
            payeeId = tempPayeeId.Success ? tempPayeeId.Value : null;
                
            if (userId == null || userId == 0)
            {
                errorMessage = "User ID is not available or invalid in session storage.";
                isLoading = false;
            }
            else
            {
                errorMessage = null;
                await FetchEmployeeByID();
                await GetVoucher();
                await JS.InvokeVoidAsync("initializeDataTable");          
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while accessing session storage: {ex.Message}";
            isLoading = false;
        }
    }

    private async Task FetchEmployeeByID()
    {
        if (userId == null || userId == 0)
        {
            errorMessage = "Employee Not Found";
            return;
        }

        errorMessage = null;

        try
        {
            var client = HttpClientFactory.CreateClient("MyApi");
            var response = await client.GetAsync($"api/My/getemployeeinfo/{userId}");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                
                var options = new JsonSerializerOptions
                {
                    Converters = { new IdNumberConverter() }
                };

                employee = JsonSerializer.Deserialize<Employee>(json, options);

                if (employee == null)
                {
                    errorMessage = "Unable to parse employee data.";
                }
            }
            else
            {
                errorMessage = "Failed to fetch employee details.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
    private async Task GetVoucher()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("MyApi");
            var response = await client.GetAsync($"api/my/GetVouchers/{payeeId}");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                if (string.IsNullOrEmpty(json))
                {
                    errorMessage = "No data returned from the API.";
                    return;
                }

            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
            vouchers = JsonSerializer.Deserialize<List<Vouchers>>(json, options);
            
                if (vouchers == null || vouchers.Count == 0)
                {
                    errorMessage = "Unable to parse or empty fiscal years data.";
                }
                else
                {
                    StateHasChanged(); 
                }
            }
            else
            {
                errorMessage = $"Failed to load fiscal years data. Status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadUserIdFromSession();
        
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isLoading)
        {
            StateHasChanged(); 

            await Task.Delay(100);

            isLoading = false;
        
            StateHasChanged();
        }
    }
    private async Task BackToEmployeePage()
    {
        await ProtectedSessionStore.DeleteAsync("UserId");
        await ProtectedSessionStore.DeleteAsync("PayeeId");
        Navigation.NavigateTo("/");
    }
}
<script src="site.js"></script>
