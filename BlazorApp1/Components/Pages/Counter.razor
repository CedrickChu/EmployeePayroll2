@page "/counter"
@rendermode InteractiveServer
@using System.Text.Json
@inject IHttpClientFactory ClientFactory
@using System.Text.Json.Serialization;

<PageTitle>Form</PageTitle>


@inject IJSRuntime JS

<div class="container-center" style="width:60%; margin:auto;">
    <h1>API Example</h1>

    <div class="form-group">
        <label for="studentIdInput" class="form-label">Enter Student ID</label>
        <input type="text" class="form-control" style='width:40%;' id="studentIdInput" @bind="studentId" placeholder="xxxx-x-xxxx" />
    </div><br>
    <button class="btn btn-primary" @onclick="showInfo">Open Student Info</button>


</div>


<!-- Bootstrap Modal -->
<div class="modal fade" id="studentModal" tabindex="-1" aria-labelledby="studentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Student Details</h5>
            </div>
            <div class="modal-body">
                @if (student != null)
                {
                    <p><strong>ID Number:</strong> @student.idNumber</p>
                    <p><strong>First Name:</strong> @student.firstName</p>
                    <p><strong>Last Name:</strong> @student.lastName</p>
                    <p><strong>Middle Name:</strong> @student.middleName</p>
                }
                else if (!string.IsNullOrEmpty(errorMessage))
                {
                    <p class="text-danger">@errorMessage</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="RefreshPage">Close</button>

            </div>
        </div>
    </div>
</div>

@code {
    public class Student
    {
        public string? idNumber { get; set; }
        public string? lastName { get; set; }
        public string? firstName { get; set; }
        public string? middleName { get; set; }
    }

    private Student? student;
    private string studentId = "";
    private string? errorMessage;

    private async Task FetchStudentData()
    {
        if (string.IsNullOrEmpty(studentId))
        {
            errorMessage = "Please enter a student ID.";
            return;
        }

        errorMessage = null;

        try
        {
            var handler = new HttpClientHandler()
            {
                ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => true
            };

            var client = new HttpClient(handler);
            var response = await client.GetAsync($"https://10.125.50.194:7087/api/My/GetStudentInfo/{studentId}");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                student = JsonSerializer.Deserialize<Student>(json);

                if (student == null)
                {
                    errorMessage = "Unable to parse student data.";
                }
            }
            else
            {
                errorMessage = $"Failed to load student data. Status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
    private async Task showInfo()
    {
        await FetchStudentData();
        await Task.Delay(100); 
        await JS.InvokeVoidAsync("showModal", "#studentModal");
    }

     public class StudentService
    {
        private readonly IHttpClientFactory _clientFactory;

        public StudentService(IHttpClientFactory clientFactory)
        {
            _clientFactory = clientFactory;
        }

    }
    private async Task ResetStudentIdInput()
        {
            await JS.InvokeVoidAsync("resetStudentIdInput", "studentIdInput");
        }
    private async Task RefreshPage()
        {
            await JS.InvokeVoidAsync("location.reload");
        }
}
<script src="site.js"></script>
