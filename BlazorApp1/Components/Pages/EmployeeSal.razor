@page "/employee"
@rendermode InteractiveServer
@using System.Text.Json
@inject IHttpClientFactory ClientFactory
@using System.Text.Json.Serialization;
@inject IJSRuntime JS
@inject HttpClient Http

<PageTitle>Form</PageTitle>

<div class="container-center" style="width:60%; margin:auto;">
    <h1>API Example</h1>

    <div class="form-group">
        <label for="employeeIdInput" class="form-label">Enter Username</label>
        <input type="text" class="form-control" style='width:40%;' id="employeeIdInput" @bind="username" placeholder="username" />
        <label for="employeePasswordInput" class="form-label">Enter Password</label>
        <input type="password" class="form-control" style='width:40%;' id="employeePasswordInput" @bind="password" placeholder="password" />
    </div><br>
    <button class="btn btn-primary" @onclick="ShowInfo">Open</button>
</div>

<!-- Bootstrap Modal -->
<div class="modal fade" id="employeeModal" tabindex="-1" aria-labelledby="employeeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Employee Details</h5>
            </div>
            <div class="modal-body">

                @if (employee != null)
                {
                    <p>ID Number: @employee.idNumber</p>
                    <p>First Name: @employee.firstName</p>
                    <p>Last Name: @employee.lastName</p>
                    <p>Middle Name: @employee.middleName</p>
                }
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <p class="text-danger">@errorMessage</p>
                }
                <select @bind="selectedYear" class="form-control" style="width:20%;">
                    <option value="" disabled selected>SELECT YEAR</option>
                    @foreach (var year in years)
                    {
                        <option value="@year">@year</option>
                    }
                </select>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>PAYROLL ID</th>
                            <th>FISCAL YEAR</th>
                            <th>DESCRIPTION</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (payrollData != null)
                        {
                            @foreach (var payroll in payrollData)
                            {
                                <tr>
                                    <td>@payroll.PayrollId</td>
                                    <td>@payroll.FiscalYear</td>
                                    <td>@payroll.PeriodDescription</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="RefreshPage">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string selectedYear = ""; 
    private List<int> years = new() { 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025 };
    public class IdNumberConverter : JsonConverter<int?>
    {
        public override int? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            if (reader.TokenType == JsonTokenType.String)
            {
                if (int.TryParse(reader.GetString(), out int result))
                {
                    return result;
                }
            }
            return null;
        }

        public override void Write(Utf8JsonWriter writer, int? value, JsonSerializerOptions options)
        {
            writer.WriteStringValue(value?.ToString());
        }
    }

    // Payroll class
    public class Payroll
    {
        public string? PeriodDescription { get; set; }
        public int? PayrollId { get; set; }
        public int? FiscalYear { get; set; }
        
    }

    // Employee class
    public class Employee
    {
        public string? username { get; set; }
        public string? password { get; set; }
        public string? firstName { get; set; }
        public string? middleName { get; set; }
        public string? lastName { get; set; }
        [JsonConverter(typeof(IdNumberConverter))]
        public int? idNumber { get; set; }
    }

    // Component state
    private List<Payroll>? payrollData = new List<Payroll>();
    private Employee? employee;
    private string username = "";
    private string password = "";
    private string? errorMessage;

    // Fetch employee ID based on username and password
    private async Task<int?> FetchEmployeeByID()
    {
        if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
        {
            errorMessage = "Please enter both a username and password.";
            return null;
        }

        errorMessage = null;

        try
        {
            var handler = new HttpClientHandler()
            {
                ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => true
            };

            var client = new HttpClient(handler);
            var response = await client.GetFromJsonAsync<int?>($"https://10.125.1.6:7087/api/My/getemployeeid/{username}/{password}");

            if (response == null)
            {
                errorMessage = "No employee found with the given username and password.";
            }

            return response;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            return null;
        }
    }

    // Fetch employee details based on the ID number
    private async Task FetchEmployeeDetail(int? idNumber)
    {
        if (idNumber == null || idNumber == 0)
        {
            errorMessage = "Employee Not Found";
            return;
        }

        errorMessage = null;

        try
        {
            var handler = new HttpClientHandler()
            {
                ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => true
            };

            var client = new HttpClient(handler);
            var response = await client.GetAsync($"https://10.125.1.6:7087/api/My/getemployeeinfo/{idNumber}");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();

                var options = new JsonSerializerOptions
                {
                    Converters = { new IdNumberConverter() }
                };

                employee = JsonSerializer.Deserialize<Employee>(json, options);

                if (employee == null)
                {
                    errorMessage = "Unable to parse employee data.";
                }
            }
            else
            {
                errorMessage = "Failed to fetch employee details.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task FetchPayrollByID(int? idNumber)
    {
        if (idNumber == null || idNumber == 0)
        {
            errorMessage = "Employee Not Found";
            return;
        }

        errorMessage = null;

        try
        {
            var handler = new HttpClientHandler()
            {
                ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => true
            };

            var client = new HttpClient(handler);
            var response = await client.GetAsync($"https://10.125.1.6:7087/api/My/getpayrolllist/{idNumber}");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                Console.WriteLine("API Response: " + json);
             
                payrollData = JsonSerializer.Deserialize<List<Payroll>>(json);

                if (payrollData == null || payrollData.Count == 0)
                {
                    errorMessage = "No payroll data found for this employee.";
                }
            }
            else
            {
                errorMessage = "Failed to fetch payroll details.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task ShowInfo()
    {
        int? userId = await FetchEmployeeByID();

        if (userId != null)
        {
            await FetchEmployeeDetail(userId);
            await FetchPayrollByID(userId);
        }

        await Task.Delay(100); 
        await JS.InvokeVoidAsync("showModal", "#employeeModal");
    }

    // Refresh the page
    private async Task RefreshPage()
    {
        await JS.InvokeVoidAsync("location.reload");
    }
}
<script src="site.js"></script>
