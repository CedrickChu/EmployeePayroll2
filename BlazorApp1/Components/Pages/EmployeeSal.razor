@page "/employee"
@rendermode InteractiveServer
@using System.Text.Json
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<PageTitle>Form</PageTitle>

<div class="container-center" style="width:60%; margin:auto;">
    <h1>API Example</h1>

    <div class="form-group">
        <label for="employeeIdInput" class="form-label">Enter Username</label>
        <input type="text" class="form-control" style='width:40%;' id="employeeIdInput" @bind="username" placeholder="username" />
        <label for="employeePasswordInput" class="form-label">Enter Password</label>
        <input type="password" class="form-control" style='width:40%;' id="employeePasswordInput" @bind="password" placeholder="password" />
    </div><br>
    <button class="btn btn-primary" @onclick="NavigateToEmployeeDetails">Open</button>
</div>

@code {
    private string username = "";
    private string password = "";
    private string? errorMessage;

    private async Task NavigateToEmployeeDetails()
    {
        int? userId = await FetchEmployeeByID();

        if (userId != null)
        {
            Navigation.NavigateTo($"/employee/payroll");
        }
    }

    private async Task<int?> FetchEmployeeByID()
    {
        if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
        {
            errorMessage = "Please enter both a username and password.";
            return null;
        }

        errorMessage = null;

        try
        {
            var handler = new HttpClientHandler()
            {
                ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => true
            };

            var client = new HttpClient(handler);
            var response = await client.GetFromJsonAsync<int?>($"https://10.125.1.6:7087/api/My/getemployeeid/{username}/{password}");

            if (response == null)
            {
                errorMessage = "No employee found with the given username and password.";
                return null;
            }

            await sessionStorage.SetItemAsync("UserId", response);

            return response;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            return null;
        }
    }
}
