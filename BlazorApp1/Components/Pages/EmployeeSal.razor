@page "/employee"
@rendermode InteractiveServer
@using System.Text.Json
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<PageTitle>Login Form</PageTitle>

<!-- Section: Design Block -->
<section class="login text-center">




    <!-- Jumbotron -->
    <div class="container-fluid py-4 w-50">

                <div class="card cascading-right bg-body-tertiary" style="
            backdrop-filter: blur(30px);
            ">
                    <div class="card-body p-5 shadow-5 text-center">
                        <h2 class="fw-bold mb-5">Login Form</h2>


                            <!-- Email input -->
                            <div data-mdb-input-init class="form-outline mb-4">
                                <label class="form-label text-start d-block" for="employeeIdInput">Email Address</label>
                                <input type="email" id="employeeIdInput" class="form-control text-center mt-2" @bind="username" />
                                
                            </div>


                            <!-- Password input -->
                            <div data-mdb-input-init class="form-outline mb-4">
                                <label class="form-label text-start d-block" for="employeePasswordInput">Password</label>
                                <input type="password" id="employeePasswordInput" class="form-control text-center mt-2" @bind="password" />
                                
                            </div>




                            <!-- Submit button -->
                            <button type="submit" data-mdb-button-init data-mdb-ripple-init
                                class="btn btn-block mb-4" style="background-color: #ff8150;" @onclick="NavigateToEmployeeDetails">
                                SUBMIT
                            </button>
                            <p>or</p>
                            <!-- Register buttons -->
                            <div class="text-center">




                                <button class="btn rounded-pill px-3 py-2" style="background-color: #eecbbdf3;">
                                    <img src="https://img.icons8.com/color/48/000000/google-logo.png" alt="Google Logo"
                                        style="height: 24px; width: 24px;">
                                    <span class="ms-2">Continue with Google</span>
                                </button>

                            </div>
                    </div>
                </div>
    </div>
    <!-- Jumbotron -->
</section>
<!-- Section: Design Block -->


@* <div class="container-center" style="width:60%; margin:auto;">
    <h1>API Example</h1>

    <div class="form-group">
        <label for="employeeIdInput" class="form-label">Enter Username</label>
        <input type="text" class="form-control" style='width:40%;' id="employeeIdInput" @bind="username" placeholder="username" />
        <label for="employeePasswordInput" class="form-label">Enter Password</label>
        <input type="password" class="form-control" style='width:40%;' id="employeePasswordInput" @bind="password" placeholder="password" />
    </div><br>
    <button class="btn btn-primary" @onclick="NavigateToEmployeeDetails">Open</button>
</div> *@

@code {
    private string username = "";
    private string password = "";
    private string? errorMessage;

    private async Task NavigateToEmployeeDetails()
    {
        int? userId = await FetchEmployeeByID();

        if (userId != null)
        {
            Navigation.NavigateTo($"/employee/payroll");
        }
    }

    private async Task<int?> FetchEmployeeByID()
    {
        if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
        {
            errorMessage = "Please enter both a username and password.";
            return null;
        }

        errorMessage = null;

        try
        {
            var handler = new HttpClientHandler()
            {
                ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => true
            };

            var client = new HttpClient(handler);
            var response = await client.GetFromJsonAsync<int?>($"https://10.125.1.6:7087/api/My/getemployeeid/{username}/{password}");

            if (response == null)
            {
                errorMessage = "No employee found with the given username and password.";
                return null; 
            }

            await sessionStorage.SetItemAsync("UserId", response);

            return response;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            return null;
        }
    }
}
