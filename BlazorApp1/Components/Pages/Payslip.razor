@page "/payroll"
@rendermode InteractiveServer
@using System.Text.Json
@inject IHttpClientFactory ClientFactory
@using System.Text.Json.Serialization;
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Navigation
@using BlazorApp1.Models
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage


<div class="container-center" style="width:80%; margin:auto;">

    <h1 class="mb-5">Employee Details</h1>

    @if (employee != null)
    {
        <div class="row justify-content-center">
            <div class="col-5 col-md-3 bg-light border-bottom border-white border-3 mb-3">
                <div class="p-2"><strong>ID Number</strong></div>
            </div>
            <div class="col-7 col-md-9 bg-light border-start border-bottom border-white border-3 mb-3">
                <div class="p-2">@employee.idNumber</div>
            </div>

            <div class="col-5 col-md-3 bg-light border-bottom border-white border-3 mb-3">
                <div class="p-2"><strong>First Name</strong></div>
            </div>
            <div class="col-7 col-md-9 bg-light border-start border-bottom border-white border-3 mb-3">
                <div class="p-2">@employee.firstName</div>
            </div>

            <div class="col-5 col-md-3 bg-light border-bottom border-white border-3 mb-3">
                <div class="p-2"><strong>Last Name</strong></div>
            </div>
            <div class="col-7 col-md-9 bg-light border-start border-bottom border-white border-3 mb-3">
                <div class="p-2">@employee.lastName</div>
            </div>

            <div class="col-5 col-md-3 bg-light border-bottom border-white border-3 mb-3">
                <div class="p-2"><strong>Middle Name</strong></div>
            </div>
            <div class="col-7 col-md-9 bg-light border-start border-bottom border-white border-3 mb-3">
                <div class="p-2">@employee.middleName</div>
            </div>
        </div>


    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger">@errorMessage</p>
    }

    @if (fiscalYearList != null)
    {

        <select class="form-select float-right" style="width:150px;" @onchange="OnFiscalYearChanged">
            <option value="" disabled selected>Select Year</option>
            @foreach (var year in fiscalYearList)
            {
                <option value="@year.FiscalYear">@year.FiscalYear</option>
            }
        </select>
        <br>


    }
    <div class="table-responsive">
        <table class="table" id="dataTable">
            <thead>
                <tr>
                    <th class="text-center">TRANSACTION NO</th>
                    <th class="text-center">FISCAL YEAR</th>
                    <th>DESCRIPTION</th>
                    <th class="text-center">PAYSLIP</th>
                </tr>
            </thead>
            <tbody>
                @if (payrollData != null)
                {
                    @foreach (var payroll in payrollData)
                    {
                        <tr>
                            <td class="text-center">@payroll.PayrollId</td>
                            <td class="text-center">@payroll.FiscalYear</td>

                            <td>
                                @payroll.PeriodDescription

                            </td>
                            <td class="text-center">
                                <button class="myButton" @onclick="() => OpenModal(payroll.PayrollId)">View Details...</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        </div>
    <button class="btn btn-secondary" @onclick="BackToEmployeePage">Back</button>

    <div class="modal fade" id="payrollModal" tabindex="-1" aria-labelledby="payrollModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="row">
                        @if (payrollModel != null && employeeInfo != null)
                        {
                            <div class="col">
                                <h1 class="mb-3">Employee Details</h1>
                                <hr style="width:80%;">
                                <br>
                                @foreach (var info in employeeInfo)
                                {
                                    <p><strong>Full Name: </strong>@info.FullName</p>
                                    <p><strong>Detail ID: </strong>@info.DetailId</p>
                                    <p><strong>Salary: </strong>@info.Salary</p>
                                    <p><strong>Day Absent: </strong>@info.DayAbsent</p>
                                    <p><strong>Minute Absent: </strong>@info.MinuteAbsent</p>
                                    <p><strong>Hour Absent: </strong> @info.HourAbsent</p>
                                    <p><strong>Amount Earned: </strong>@info.AmountEarned</p>
                                    <p><strong>Period Description: </strong>@info.PeriodDescription</p>
                                    <p><strong>Employee Position: </strong> @info.EmployeePosition</p>
                                    <p><strong>Employee Number: </strong>@info.EmployeeNumber</p>
                                }
                            </div>
                        }

                        @if (payrollModel != null && payslipDetails != null)

                        {

                            <div class="col">
                                <h1 class="mb-3">Payslip Details</h1>
                                <hr style="width:80%;"><br>
                                @foreach (var pay in payslipDetails)
                                {
                                    <p><strong>Deduction Description: </strong>@pay.DeductionDescription</p>
                                    <p><strong>Amount: </strong>@pay.Amount</p>
                                }
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    public class IdNumberConverter : JsonConverter<int?>
    {
        public override int? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            if (reader.TokenType == JsonTokenType.String)
            {
                if (int.TryParse(reader.GetString(), out int result))
                {
                    return result;
                }
            }
            return null;
        }

        public override void Write(Utf8JsonWriter writer, int? value, JsonSerializerOptions options)
        {
            writer.WriteStringValue(value?.ToString());
        }
    }
    private int? userId;
    private Employee? employee;
    private List<Payroll>? payrollData;
    private List<FiscalYearList>? fiscalYearList = new List<FiscalYearList>();
    private List<PayslipDetails>? payslipDetails = new List<PayslipDetails>();
    private List<EmployeeInfo>? employeeInfo = new List<EmployeeInfo>();
    private PayrollModel? payrollModel;
    private int? fiscalYear = null;
    private int? PayrollId;
    private int? selectedFiscalYear = null;
    private string? errorMessage;
    private bool isInitialized = false;
    private bool isLoading = true;
    private bool showModal = false;

    private async Task LoadUserIdFromSession()
    {
        try
        {
            userId = await sessionStorage.GetItemAsync<int?>("UserId");

            if (userId == null || userId == 0)
            {
                errorMessage = "User ID is not available or invalid in session storage.";
                isLoading = false;
            }
            else
            {
                errorMessage = null;
                await FetchEmployeeByID();
                await InitializeData();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while accessing session storage: {ex.Message}";
            isLoading = false;
        }
    }

    private async Task FetchEmployeeByID()
    {
        if (userId == null || userId == 0)
        {
            errorMessage = "Employee Not Found";
            return;
        }

        errorMessage = null;

        try
        {
            var handler = new HttpClientHandler()
            {
                ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => true
            };

            var client = new HttpClient(handler);
            var response = await client.GetAsync($"https://10.125.1.6:7087/api/My/getemployeeinfo/{userId}");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var options = new JsonSerializerOptions
                {
                    Converters = { new IdNumberConverter() }
                };

                employee = JsonSerializer.Deserialize<Employee>(json, options);

                if (employee == null)
                {
                    errorMessage = "Unable to parse employee data.";
                }
            }
            else
            {
                errorMessage = "Failed to fetch employee details.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task InitializeData()
    {
        if (userId != null && userId > 0 && !isInitialized)
        {
            await GetFiscalYear();
            Console.WriteLine($"UserId: {userId}");

            if (selectedFiscalYear != null)
            {
                Console.WriteLine($"Selected Fiscal Year: {selectedFiscalYear}");
                await FetchPayrollByID(userId, selectedFiscalYear);
            }
            else
            {
                errorMessage = "Please select a fiscal year.";
            }

            isInitialized = true;
            isLoading = false;
            StateHasChanged();
        }
        else
        {
            errorMessage = "Invalid User ID or already initialized.";
            isLoading = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserIdFromSession();
    }

    private async Task GetFiscalYear()
    {
        try
        {
            var handler = new HttpClientHandler()
            {
                ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => true
            };

            var client = new HttpClient(handler);
            var response = await client.GetAsync($"https://10.125.1.6:7087/api/my/GetPayrollYears");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                fiscalYearList = JsonSerializer.Deserialize<List<FiscalYearList>>(json);

                if (fiscalYearList == null || fiscalYearList.Count == 0)
                {
                    errorMessage = "Unable to parse or empty fiscal years data.";
                }
            }
            else
            {
                errorMessage = $"Failed to load fiscal years data. Status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task OnFiscalYearChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int year))
        {
            if (selectedFiscalYear != year)
            {
                selectedFiscalYear = year;
                Console.WriteLine($"Selected Fiscal Year Updated: {selectedFiscalYear}");

                await FetchPayrollByID(userId, selectedFiscalYear);
            }
        }
    }

    private async Task FetchPayrollByID(int? idNumber, int? selectedFiscalYear)
    {
        if (idNumber == null || idNumber == 0)
        {
            errorMessage = "Employee Not Found";
            return;
        }

        errorMessage = null;

        try
        {
            var handler = new HttpClientHandler()
            {
                ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => true
            };

            var client = new HttpClient(handler);
            var response = await client.GetAsync($"https://10.125.1.6:7087/api/My/getpayrolllist/{idNumber}/{selectedFiscalYear}");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                payrollData = JsonSerializer.Deserialize<List<Payroll>>(json);

                if (payrollData == null || payrollData.Count == 0)
                {
                    errorMessage = "No payroll data found for this employee.";
                }
            }
            else
            {
                errorMessage = "Failed to fetch payroll details.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
    private async Task FetchPayrollDetail(int? payslipId, int? idNumber)
    {
        if (idNumber == null || idNumber == 0)
        {
            errorMessage = "Employee Not Found";
            return;
        }
        if (payslipId == null || payslipId == 0)
        {
            errorMessage = "Employee Not Found";
            return;
        }

        errorMessage = null;

        try
        {
            var handler = new HttpClientHandler()
            {
                ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => true
            };

            var client = new HttpClient(handler);
            var response = await client.GetAsync($"https://10.125.1.6:7087/api/My/getpayslip/{payslipId}/{idNumber}");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                payrollModel = JsonSerializer.Deserialize<PayrollModel>(json);
                employeeInfo = payrollModel.EmployeeInfo;
                payslipDetails = payrollModel.PayslipDetails;


            }
            else
            {
                errorMessage = "Failed to fetch payroll details.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
    private async Task OpenModal(int? payslipId)
    {
        await FetchPayrollDetail(payslipId, userId);
        await Task.Delay(100);
        await JS.InvokeVoidAsync("showModal", "#payrollModal");
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isLoading)
        {
            await Task.Delay(500);
            StateHasChanged();
        }
    }
    private async Task BackToEmployeePage()
    {
        await sessionStorage.RemoveItemAsync("UserId");


        Navigation.NavigateTo("/");
    }

}
<script src="site.js"></script>