@page "/"
@layout LoginLayout
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>Login Form</PageTitle>
<section class="login text-center">
    <!-- Jumbotron -->
    <div class="container py-4">
        <div class="row justify-content-center">
            <div class="col-12 col-md-6 col-lg-6">
                <div class="card cascading-right bg-body-tertiary" <form @onsubmit="NavigateToEmployeeDetails">
                    <div class="card-body p-5 shadow-5 text-center">
                        <h2 class="fw-bold mb-5">Login Form</h2>

                        <!-- Email input -->
                        <div data-mdb-input-init class="form-outline mb-4">
                            <label class="form-label text-start d-block" for="employeeIdInput">Email Address</label>
                            <div class="input-group">
                                <!-- External SVG Person Icon -->
                                <span class="input-group-text bg-light">
                                    <img src="images/person.svg" alt="Person Icon" width="24" height="24">
                                </span>
                                <input type="email" id="employeeIdInput" class="form-control text-start"
                                    @bind="username" />
                            </div>
                        </div>

                        <!-- Password input with eye icon -->
                        <div data-mdb-input-init class="form-outline mb-4">
                            <label class="form-label text-start d-block" for="employeePasswordInput">Password</label>
                            <div class="input-group position-relative">
                                <!-- External SVG Key Icon -->
                                <span class="input-group-text bg-light">
                                    <img src="images/key.svg" alt="Key Icon" width="24" height="24">
                                </span>

                                <input type="password" id="employeePasswordInput"
                                    class="form-control text-start ps-3 pe-5" @bind="password" />

                                <!-- Eye Icon for Password Toggle -->
                                <span class="position-absolute top-50 end-0 translate-middle-y me-3"
                                    style="cursor: pointer; z-index: 5;" onclick="togglePassword()">
                                    <img id="togglePasswordIcon" src="images/eye-slash.svg" alt="Eye Icon" width="24"
                                        height="24">
                                </span>
                            </div>
                        </div>



                        <!-- Submit button -->
                        <button type="submit" data-mdb-button-init data-mdb-ripple-init class="btn btn-block"
                            style="background-color: #ff8150;">
                            SUBMIT
                        </button>
                        <div class="text-center my-3">
                            <span style="color: #6c757d; font-size: small;">————— Or Continue With —————</span>
                        </div>
                        <!-- Register buttons -->
                        <div class="text-center">

                            <a href="/login-google" class="btn rounded-pill px-3 py-2"
                                style="background-color: #eecbbdf3;">
                                <img src="https://img.icons8.com/color/48/000000/google-logo.png" alt="Google Logo"
                                    style="height: 24px; width: 24px;">
                                <span class="ms-2">Continue with Google</span>
                            </a>
                        </div>
                    </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <!-- Jumbotron -->
</section>

<script>
    function togglePassword() {
        var passwordInput = document.getElementById("employeePasswordInput");
        var icon = document.getElementById("togglePasswordIcon");

        if (passwordInput.type === "password") {
            passwordInput.type = "text";
            icon.src = "images/eye.svg"; // Change to an "open eye" icon if available
        } else {
            passwordInput.type = "password";
            icon.src = "images/eye-slash.svg"; // Change back to "closed eye"
        }
    }
</script>

@code {
    private string username = "";
    private string password = "";
    private string? errorMessage;

    private async Task NavigateToEmployeeDetails()
    {
        int? userId = await FetchEmployeeID();

        if (userId != null)
        {
            int? payeeId = await GetPayeeId(userId);
            if (payeeId != null)
            {

                Navigation.NavigateTo("/payroll");
            }
        }
    }

    private async Task<int?> FetchEmployeeID()
    {
        if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
        {
            errorMessage = "Please enter both a username and password.";
            return null;
        }

        errorMessage = null;

        try
        {

            var client = HttpClientFactory.CreateClient("MyApi");
            var response = await client.GetFromJsonAsync<int?>($"api/My/getemployeeid/{username}/{password}");

            if (response == null)
            {
                errorMessage = "No employee found with the given username and password.";
                return null;
            }

            await ProtectedSessionStore.SetAsync("UserId", response);
            return response;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            return null;
        }
    }

    private async Task<int?> GetPayeeId(int? userId)
    {
        errorMessage = null;

        try
        {
            var client = HttpClientFactory.CreateClient("MyApi");
            var response = await client.GetFromJsonAsync<int?>($"api/My/getpayeeid/{userId}");

            if (response == null)
            {
                errorMessage = "No Payee found for the given employee ID.";
                return null;
            }
            await ProtectedSessionStore.SetAsync("PayeeId", response); ;

            return response;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            return null;
        }
    }
}
